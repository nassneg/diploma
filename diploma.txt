Дипломная работа

  Введение
    Немного информации о платформе
      Основное предложение ServiceNow - это готовая платформа, которая позволяет бизнесу упростить и автоматизировать рутинные рабочие задачи и обеспечить плавное выполнение проектов с использованием единой модели данных. Компании, использующие ServiceNow, могут быстро достичь улучшенных возможностей самообслуживания для всех пользователей (как сотрудников, так и клиентов) и повысить эффективность операций обслуживания. В первые годы существования ServiceNow продавался как решение ITSM (Управление информационными технологиями) и получил быстрое признание со стороны ИТ-специалистов. Однако благодаря своей элегантной, интуитивно понятной конструкции платформы ServiceNow все чаще включается в другие сервисные и бизнес-подразделения в растущем списке отраслей. Кроме того, ServiceNow обеспечивает бизнес-аналитику, в том числе KPI, посредством ServiceNow Performance Analytics, позволяя группам, отвечающим за управление услугами, преобразовывать идеи в улучшения. Сегодня в ServiceNow наблюдается заметный рост в CSM (управление обслуживанием клиентов), ITBM (управление бизнесом в сфере информационных технологий), PPM (управление портфелем проектов) и ITOM (управление операциями в сфере информационных технологий).
  Постановка задачи
    //
  Особенности Cloud Platform Service Now
    Рассказать о том что будет использоваться мною в интеграции:
      Service Portal
      Business Rules
      Script Include
      restMessage
      JSON Parse
      Reporting and Dashboards

    Вывод:
      //Было бы неплохо найти инфу об исследованиях, подтверждающих эффективность внедрения СН
  Анализ существующих OCR сервисов. Выбор лучшего (//необходимо предоставить какие-нибудь эксперименты над сервисами и выбрать лучшие для того, чтобы работать с ними)
    Tesseract JS
      This library supports more than 100 languages, automatic text orientation and script detection, a simple interface for reading paragraph, word, and character bounding boxes. Tesseract.js can run either in a browser and on a server with NodeJS.
      Плюсы
         Открытый код
         Бесплатно
         Несложно внедрять
      Минусы

    Google Vision AI
    ABBYY FineReader Engine (обосновать дороговизну использования данного апи)
  Работа с tesseract JS
    // Интеграция с платформой
      Добавляем библиотеку Tesseract локально в инстанс (UI Script)
      Настраиваем вид таблицы Images.
      Создаём Клиентский скрпит, в котором вызываем методы ранее добавленной библиотеки. Связываем необходимые поля на форме Images логикой.
      В итоге видим, что нельзя обнаружать текст с изображений, включающих в себя текст, написанный на более чем одном языке. Этот недостаток является существенным, так как чеки включают в себя и русский и английский текст.
    // Выводы
      Не подходит для работы с чеками
  Работа с Google Cloud
    Внедрение Google Cloud API
      Чтобы использовать API, мы должны включить его в Google Cloud Developer Console. Вот как это сделать:
      Создайте проект в Google Cloud Console или используйте существующий.
      Включите в проекте Billing. Если это ваше первое использование Google Cloud Console, вы можете начать бесплатный пробный период использования. У вас могут попросить данные карты, но денег не спишут.
      Включите Google Cloud Vision API
      Откройте в боковом меню слева секцию Credentials.
      Выберите в меню OAuth Client ID: установите тип приложения Android, введите название приложения и отпечаток SHA1 (если у вас его нет или вы не знаете, как его сгенерировать, введите эту команду в терминале keytool -exportcert -keystore path-of-your-keystore -list -v). Затем введите имя пакета вашего приложения: оно должно совпадать с именем, указанным в файле build.gradle вашего приложения, в ключе applicationId. В моем случае —  com.lpirro.cloudvision.

      Для начала нужно зарегистрироваться в консоли разработчика по ссылке console.cloud.google.com. Нужно создать проект, включить для него Google Cloud Vision API. Далее в меню консоли необходимо перейти в Диспетчер API-учетные данные и создать ключ API, который будет использоваться для тестирования. В документации есть хорошая инструкция на английском. Если все было сделано верно, то ваша консоль должна выглядеть как на картинке ниже:

    Формирование JSON request
      Кодирование картинки
      Энд поинт
      методы
    Отправка request
    Получение Responce
    Парсинг JSON
  UX
    Логика описана в блоксхеме, её надо подробнее расписать
  UI
    Работа с Сервис порталом
    AJAX
    HTML
    Jelly
  Заключение
    //
  Литература
      ..



//Неплохо было бы, подкрепить оправданность интеграции статистикой и замерами времени потраченного на ручной/с использованием OCR труд
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Главные задачи:
  1. Создание логики и удобного UX, чтобы пользователь мог только загрузить картинку, нажать кнопку и получить текст
  2. Создание UI (необходимо создать таблицу для наших данных, форму которая поможет пользователю загружать картинку, дашборды и тому подобное для красоты)
  5. Продумать алгоритм постобработки чеков
